{
    "api_path": "numpy.max",
    "arguments_str": "a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue",
    "doc_string": "Return the maximum of an array or maximum along an axis.\n\nParameters\n----------\na : array_like\n    Input data.\naxis : None or int or tuple of ints, optional\n    Axis or axes along which to operate.  By default, flattened input is\n    used.\n\n    .. versionadded:: 1.7.0\n\n    If this is a tuple of ints, the maximum is selected over multiple axes,\n    instead of a single axis or all the axes as before.\nout : ndarray, optional\n    Alternative output array in which to place the result.  Must\n    be of the same shape and buffer length as the expected output.\n    See :ref:`ufuncs-output-type` for more details.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the input array.\n\n    If the default value is passed, then `keepdims` will not be\n    passed through to the ``max`` method of sub-classes of\n    `ndarray`, however any non-default value will be.  If the\n    sub-class' method does not implement `keepdims` any\n    exceptions will be raised.\n\ninitial : scalar, optional\n    The minimum value of an output element. Must be present to allow\n    computation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.15.0\n\nwhere : array_like of bool, optional\n    Elements to compare for the maximum. See `~numpy.ufunc.reduce`\n    for details.\n\n    .. versionadded:: 1.17.0\n\nReturns\n-------\nmax : ndarray or scalar\n    Maximum of `a`. If `axis` is None, the result is a scalar value.\n    If `axis` is an int, the result is an array of dimension\n    ``a.ndim - 1``. If `axis` is a tuple, the result is an array of \n    dimension ``a.ndim - len(axis)``.\n\nSee Also\n--------\namin :\n    The minimum value of an array along a given axis, propagating any NaNs.\nnanmax :\n    The maximum value of an array along a given axis, ignoring any NaNs.\nmaximum :\n    Element-wise maximum of two arrays, propagating any NaNs.\nfmax :\n    Element-wise maximum of two arrays, ignoring any NaNs.\nargmax :\n    Return the indices of the maximum values.\n\nnanmin, minimum, fmin\n\nNotes\n-----\nNaN values are propagated, that is if at least one item is NaN, the\ncorresponding max value will be NaN as well. To ignore NaN values\n(MATLAB behavior), please use nanmax.\n\nDon't use `~numpy.max` for element-wise comparison of 2 arrays; when\n``a.shape[0]`` is 2, ``maximum(a[0], a[1])`` is faster than\n``max(a, axis=0)``.\n\nExamples\n--------\n>>> a = np.arange(4).reshape((2,2))\n>>> a\narray([[0, 1],\n       [2, 3]])\n>>> np.max(a)           # Maximum of the flattened array\n3\n>>> np.max(a, axis=0)   # Maxima along the first axis\narray([2, 3])\n>>> np.max(a, axis=1)   # Maxima along the second axis\narray([1, 3])\n>>> np.max(a, where=[False, True], initial=-1, axis=0)\narray([-1,  3])\n>>> b = np.arange(5, dtype=float)\n>>> b[2] = np.NaN\n>>> np.max(b)\nnan\n>>> np.max(b, where=~np.isnan(b), initial=-1)\n4.0\n>>> np.nanmax(b)\n4.0\n\nYou can use an initial value to compute the maximum of an empty slice, or\nto initialize it to a different value:\n\n>>> np.max([[-50], [10]], axis=-1, initial=0)\narray([ 0, 10])\n\nNotice that the initial value is used as one of the elements for which the\nmaximum is determined, unlike for the default argument Python's max\nfunction, which is only used for empty iterables.\n\n>>> np.max([5], initial=6)\n6\n>>> max([5], default=6)\n5",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": "@array_function_dispatch(_max_dispatcher)\n@set_module('numpy')\ndef max(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue,\n         where=np._NoValue):\n    \"\"\"\n    Return the maximum of an array or maximum along an axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : None or int or tuple of ints, optional\n        Axis or axes along which to operate.  By default, flattened input is\n        used.\n\n        .. versionadded:: 1.7.0\n\n        If this is a tuple of ints, the maximum is selected over multiple axes,\n        instead of a single axis or all the axes as before.\n    out : ndarray, optional\n        Alternative output array in which to place the result.  Must\n        be of the same shape and buffer length as the expected output.\n        See :ref:`ufuncs-output-type` for more details.\n\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the input array.\n\n        If the default value is passed, then `keepdims` will not be\n        passed through to the ``max`` method of sub-classes of\n        `ndarray`, however any non-default value will be.  If the\n        sub-class' method does not implement `keepdims` any\n        exceptions will be raised.\n\n    initial : scalar, optional\n        The minimum value of an output element. Must be present to allow\n        computation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n        .. versionadded:: 1.15.0\n\n    where : array_like of bool, optional\n        Elements to compare for the maximum. See `~numpy.ufunc.reduce`\n        for details.\n\n        .. versionadded:: 1.17.0\n\n    Returns\n    -------\n    max : ndarray or scalar\n        Maximum of `a`. If `axis` is None, the result is a scalar value.\n        If `axis` is an int, the result is an array of dimension\n        ``a.ndim - 1``. If `axis` is a tuple, the result is an array of \n        dimension ``a.ndim - len(axis)``.\n\n    See Also\n    --------\n    amin :\n        The minimum value of an array along a given axis, propagating any NaNs.\n    nanmax :\n        The maximum value of an array along a given axis, ignoring any NaNs.\n    maximum :\n        Element-wise maximum of two arrays, propagating any NaNs.\n    fmax :\n        Element-wise maximum of two arrays, ignoring any NaNs.\n    argmax :\n        Return the indices of the maximum values.\n\n    nanmin, minimum, fmin\n\n    Notes\n    -----\n    NaN values are propagated, that is if at least one item is NaN, the\n    corresponding max value will be NaN as well. To ignore NaN values\n    (MATLAB behavior), please use nanmax.\n\n    Don't use `~numpy.max` for element-wise comparison of 2 arrays; when\n    ``a.shape[0]`` is 2, ``maximum(a[0], a[1])`` is faster than\n    ``max(a, axis=0)``.\n\n    Examples\n    --------\n    >>> a = np.arange(4).reshape((2,2))\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> np.max(a)           # Maximum of the flattened array\n    3\n    >>> np.max(a, axis=0)   # Maxima along the first axis\n    array([2, 3])\n    >>> np.max(a, axis=1)   # Maxima along the second axis\n    array([1, 3])\n    >>> np.max(a, where=[False, True], initial=-1, axis=0)\n    array([-1,  3])\n    >>> b = np.arange(5, dtype=float)\n    >>> b[2] = np.NaN\n    >>> np.max(b)\n    nan\n    >>> np.max(b, where=~np.isnan(b), initial=-1)\n    4.0\n    >>> np.nanmax(b)\n    4.0\n\n    You can use an initial value to compute the maximum of an empty slice, or\n    to initialize it to a different value:\n\n    >>> np.max([[-50], [10]], axis=-1, initial=0)\n    array([ 0, 10])\n\n    Notice that the initial value is used as one of the elements for which the\n    maximum is determined, unlike for the default argument Python's max\n    function, which is only used for empty iterables.\n\n    >>> np.max([5], initial=6)\n    6\n    >>> max([5], default=6)\n    5\n    \"\"\"\n    return _wrapreduction(a, np.maximum, 'max', axis, None, out,\n                          keepdims=keepdims, initial=initial, where=where)\n",
    "summarized_doc": "This function returns the maximum value in a given array or the maximum value along a specified axis.\n\nParameters:\n\n- a (array_like): This is the input data.\n- axis (None or integer or tuple of integers, optional): This argument specifies the axis or axes along which to operate. By default, it uses the flattened input. If it's a tuple of integers, the maximum value is selected over multiple axes.\n- out (ndarray, optional): This is an alternative output array where the result is placed. It must be of the same shape and buffer length as the expected output.\n- keepdims (bool, optional): If set to True, the axes which are reduced are left in the result as dimensions with size one.\n- initial (scalar, optional): This is the minimum value of an output element. Must be present to allow computation on an empty slice. \n- where (array_like of bool, optional): This presents the elements to compare for the maximum.\n\nReturns:\n\n- max (ndarray or scalar): Maximum of 'a'. If 'axis' is None, the result is a scalar value. If 'axis' is an integer, the result is an array of dimension ``a.ndim - 1``. If 'axis' is a tuple, the result is an array of dimension ``a.ndim - len(axis)``.\n\nExample:\n\n```python\nimport numpy as np\n\na = np.arange(4).reshape((2,2))\nprint(np.max(a))   # Output: 3\nprint(np.max(a, axis=0))   # Output: array([2, 3])\nprint(np.max(a, axis=1))   # Output: array([1, 3])\n```\n\nNotes:\n\nDo not use `~numpy.max` for element-wise comparison of 2 arrays; when `a.shape[0]` is 2, `maximum(a[0], a[1])` is quicker than `max(a, axis=0)`. NaN values are propagated. If at least one item is NaN, the corresponding max value will be NaN as well. Use nanmax to ignore NaN values."
}