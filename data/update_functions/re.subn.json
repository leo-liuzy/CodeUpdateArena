{
    "api_path": "re.subn",
    "arguments_str": "pattern,repl,string,count=0,flags=0",
    "doc_string": "Return a 2-tuple containing (new_string, number).\nnew_string is the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in the source\nstring by the replacement repl.  number is the number of\nsubstitutions that were made. repl can be either a string or a\ncallable; if a string, backslash escapes in it are processed.\nIf it is a callable, it's passed the Match object and must\nreturn a replacement string to be used.",
    "imports": [
        "import re"
    ],
    "return_type_hint": "",
    "source_code": "def subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n",
    "summarized_doc": "Function: ``re.subn(pattern, repl, string, count=0, flags=0)``\n\nDescription:\nThis function returns a 2-tuple where the first element is a string that is derived by replacing the leftmost non-overlapping occurrences of the pattern in the source string by the replacement `repl`. The second element of the tuple is the number of substitutions that were made.\n\nParameters:\n\n- `pattern`: The regular expression pattern that is searched in the input string. \n\n- `repl`: A replacement string or a callable, which replaces the pattern in the string. If it's a string, backslash escapes in it are processed. If it's a callable, it's passed to the `Match` object and it must return a replacement string to be used.\n\n- `string`: Source string where the substitutions will be made.\n\n- `count`: Optional. Specifies the maximum number of substitutions to be made. Default value is 0, which means all occurrences are replaced.\n\n- `flags`: Optional. Modifies the behavior of the function. Default value is 0.\n\nReturn Value: \nA 2-tuple (`new_string`, `number`), where `new_string` is the string with replacements, and `number` is the number of substitutions that were made.\n\nExample:\n\n```python\nimport re\ntext = \"Hello World, World is big. World is beautiful.\"\nnew_text, num = re.subn('World', 'Earth', text)\nprint(new_text)    # \"Hello Earth, Earth is big. Earth is beautiful.\"\nprint(num)         # 3\n```"
}