{
    "api_path": "itertools.product",
    "arguments_str": "*iterables,repeat=1",
    "doc_string": "product(*iterables, repeat=1) --> product object\n\nCartesian product of input iterables.  Equivalent to nested for-loops.\n\nFor example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).\n\nTo compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).\n\nproduct('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\nproduct((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...",
    "imports": [
        "import itertools"
    ],
    "return_type_hint": "",
    "source_code": null,
    "summarized_doc": "**Function**: product(*iterables, repeat=1)\n\n**Description**: \nThis method returns a cartesian product of the given input iterables. It is equivalent to using nested for-loops. The product is obtained in a way similar to an odometer. If you want to compute the product of an iterable with itself, you can specify the number of repetitions using the optional repeat keyword argument.\n\n**Parameters**:\n\n1. *iterables: This is a sequence of iterables. These can be of any type that can be iterated over.\n\n2. repeat (optional, default=1): This is the number of repetitions of the iterable in the product. It should be an integer.\n\n**Output**: \nThe method returns a product object. This is an iterable that generates tuples. Each tuple represents a combination from the input iterables.\n\n**Example Usage**: \n\n```python\n# Example 1:\nfrom itertools import product\nfor i in product('ab', range(3)):\n    print(i)\n# Output: ('a', 0), ('a', 1), ('a', 2), ('b', 0), ('b', 1), ('b', 2)\n\n# Example 2: \nfor i in product((0,1), repeat=3):\n    print(i)\n# Output: (0,0,0), (0,0,1), (0,1,0), (0,1,1), (1,0,0), ...\n``` \n\nIn example 1: You have two iterables `'ab'` and `range(3)`. The product will create pairs such that first element is from `'ab'` and second element from `range(3)`.\n\nIn example 2: Instead of passing multiple iterables, we passed `(0,1)` and `repeat=3`. It will treat it as product((0,1), (0,1), (0,1)). Hence it will generate all 2^3 combinations."
}