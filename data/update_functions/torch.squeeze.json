{
    "api_path": "torch.squeeze",
    "arguments_str": "input,dim=None",
    "doc_string": "squeeze(input, dim=None) -> Tensor\n\nReturns a tensor with all specified dimensions of :attr:`input` of size `1` removed.\n\nFor example, if `input` is of shape:\n:math:`(A \\times 1 \\times B \\times C \\times 1 \\times D)` then the `input.squeeze()`\nwill be of shape: :math:`(A \\times B \\times C \\times D)`.\n\nWhen :attr:`dim` is given, a squeeze operation is done only in the given\ndimension(s). If `input` is of shape: :math:`(A \\times 1 \\times B)`,\n``squeeze(input, 0)`` leaves the tensor unchanged, but ``squeeze(input, 1)``\nwill squeeze the tensor to the shape :math:`(A \\times B)`.\n\n.. note:: The returned tensor shares the storage with the input tensor,\n          so changing the contents of one will change the contents of the other.\n\n.. warning:: If the tensor has a batch dimension of size 1, then `squeeze(input)`\n          will also remove the batch dimension, which can lead to unexpected\n          errors. Consider specifying only the dims you wish to be squeezed.\n\nArgs:\n    input (Tensor): the input tensor.\n    dim (int or tuple of ints, optional): if given, the input will be squeezed\n           only in the specified dimensions.\n\n        .. versionchanged:: 2.0\n           :attr:`dim` now accepts tuples of dimensions.\n\nExample::\n\n    >>> x = torch.zeros(2, 1, 2, 1, 2)\n    >>> x.size()\n    torch.Size([2, 1, 2, 1, 2])\n    >>> y = torch.squeeze(x)\n    >>> y.size()\n    torch.Size([2, 2, 2])\n    >>> y = torch.squeeze(x, 0)\n    >>> y.size()\n    torch.Size([2, 1, 2, 1, 2])\n    >>> y = torch.squeeze(x, 1)\n    >>> y.size()\n    torch.Size([2, 2, 1, 2])\n    >>> y = torch.squeeze(x, (1, 2, 3))\n    torch.Size([2, 2, 2])",
    "imports": [
        "import torch"
    ],
    "return_type_hint": "-> Tensor",
    "source_code": null,
    "summarized_doc": "The `squeeze()` function in PyTorch returns a tensor by removing all dimensions of size `1` from the `input` tensor. If no dimension is specified, it removes all dimensions of size `1`. If a dimension `dim` is provided, only that dimension is squeezed.\n\nTo illustrate, if the `input` tensor has a shape `(A x 1 x B x C x 1 x D)`, applying `input.squeeze()` will result in a shape of `(A x B x C x D)`.\n\nHowever, if a dimension is provided, say `dim=1`, and the input is shape `(A x 1 x B)`, then `squeeze(input, 1)` will result in shape `(A x B)`. \n\nPlease note that the returned tensor shares its storage with the input tensor, meaning a change in one will affect the other. Additionally, if the tensor has a batch dimension of size 1, then squeezing the input tensor also removes the batch dimension which might lead to unexpected errors. So, it's recommended to specify only the dimensions you want to squeeze.\n\nThe parameters for this function are:\n1. `input` (Tensor): The input tensor to squeeze.\n2. `dim` (int or tuple of ints, optional): Dimension or dimensions to squeeze. As of version 2.0, multiple dimensions can be provided as a tuple.\n\nHere's an example of `squeeze()` in use:\n\n```python\nx = torch.zeros(2, 1, 2, 1, 2)\nprint(x.size())  # Output: torch.Size([2, 1, 2, 1, 2])\ny = torch.squeeze(x)\nprint(y.size())  # Output: torch.Size([2, 2, 2])\ny = torch.squeeze(x, 0)\nprint(y.size())  # Output: torch.Size([2, 1, 2, 1, 2])\ny = torch.squeeze(x, 1)\nprint(y.size())  # Output: torch.Size([2, 2, 1, 2])\ny = torch.squeeze(x, (1, 2, 3))\nprint(y.size())  # Output: torch.Size([2, 2, 2])\n```"
}