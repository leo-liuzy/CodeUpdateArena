{
    "api_path": "numpy.full",
    "arguments_str": "shape,fill_value,dtype=None,order='C',*,like=None",
    "doc_string": "Return a new array of given shape and type, filled with `fill_value`.\n\nParameters\n----------\nshape : int or sequence of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\nfill_value : scalar or array_like\n    Fill value.\ndtype : data-type, optional\n    The desired data-type for the array  The default, None, means\n     ``np.array(fill_value).dtype``.\norder : {'C', 'F'}, optional\n    Whether to store multidimensional data in C- or Fortran-contiguous\n    (row- or column-wise) order in memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of `fill_value` with the given shape, dtype, and order.\n\nSee Also\n--------\nfull_like : Return a new array with shape of input filled with value.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nzeros : Return a new array setting values to zero.\n\nExamples\n--------\n>>> np.full((2, 2), np.inf)\narray([[inf, inf],\n       [inf, inf]])\n>>> np.full((2, 2), 10)\narray([[10, 10],\n       [10, 10]])\n\n>>> np.full((2, 2), [1, 2])\narray([[1, 2],\n       [1, 2]])",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": "@set_array_function_like_doc\n@set_module('numpy')\ndef full(shape, fill_value, dtype=None, order='C', *, like=None):\n    \"\"\"\n    Return a new array of given shape and type, filled with `fill_value`.\n\n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    fill_value : scalar or array_like\n        Fill value.\n    dtype : data-type, optional\n        The desired data-type for the array  The default, None, means\n         ``np.array(fill_value).dtype``.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n    ${ARRAY_FUNCTION_LIKE}\n\n        .. versionadded:: 1.20.0\n\n    Returns\n    -------\n    out : ndarray\n        Array of `fill_value` with the given shape, dtype, and order.\n\n    See Also\n    --------\n    full_like : Return a new array with shape of input filled with value.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    zeros : Return a new array setting values to zero.\n\n    Examples\n    --------\n    >>> np.full((2, 2), np.inf)\n    array([[inf, inf],\n           [inf, inf]])\n    >>> np.full((2, 2), 10)\n    array([[10, 10],\n           [10, 10]])\n\n    >>> np.full((2, 2), [1, 2])\n    array([[1, 2],\n           [1, 2]])\n\n    \"\"\"\n    if like is not None:\n        return _full_with_like(\n                like, shape, fill_value, dtype=dtype, order=order)\n\n    if dtype is None:\n        fill_value = asarray(fill_value)\n        dtype = fill_value.dtype\n    a = empty(shape, dtype, order)\n    multiarray.copyto(a, fill_value, casting='unsafe')\n    return a\n",
    "summarized_doc": "This function returns a new array of a specific shape and type, filled with specified fill value.\n\nParameters:\n1. `shape` (int or sequence of ints): Defines the shape of the new array, for example, (2, 3) or 2.\n\n2. `fill_value` (scalar or array_like): The value used to fill the array.\n\n3. `dtype` (data-type, optional): Desired data-type for the array. If `None` (default), the data-type becomes `np.array(fill_value).dtype`.\n\n4. `order` ({'C', 'F'}, optional): Specifies whether to store multi-dimensional data in C or Fortran-contiguous (row- or column-wise) order in memory.\n\n5. `like` (array_like, optional): Allows creation of arrays that are not NumPy arrays. If an array-like with the `__array_function__` protocol is passed as `like`, the result will be defined by it. This means it'll create an array object compatible with the one passed in this argument. This parameter is available from version 1.20.0.\n\nReturns:\n`out` (ndarray): An array of `fill_value` with the given shape, dtype, and order.\n\nUse `full_like`, `empty`, `ones`, `zeros` for similar functionalities.\n\nExample usage:\n```python\n>>> import numpy as np\n>>> np.full((2, 2), np.inf)\narray([[inf, inf],\n       [inf, inf]])\n>>> np.full((2, 2), 10)\narray([[10, 10],\n       [10, 10]])\n>>> np.full((2, 2), [1, 2])\narray([[1, 2],\n       [1, 2]])\n```"
}