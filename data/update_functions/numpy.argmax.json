{
    "api_path": "numpy.argmax",
    "arguments_str": "a,axis=None,out=None,*,keepdims=np._NoValue",
    "doc_string": "Returns the indices of the maximum values along an axis.\n\nParameters\n----------\na : array_like\n    Input array.\naxis : int, optional\n    By default, the index is into the flattened array, otherwise\n    along the specified axis.\nout : array, optional\n    If provided, the result will be inserted into this array. It should\n    be of the appropriate shape and dtype.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the array.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nindex_array : ndarray of ints\n    Array of indices into the array. It has the same shape as `a.shape`\n    with the dimension along `axis` removed. If `keepdims` is set to True,\n    then the size of `axis` will be 1 with the resulting array having same\n    shape as `a.shape`.\n\nSee Also\n--------\nndarray.argmax, argmin\namax : The maximum value along a given axis.\nunravel_index : Convert a flat index into an index tuple.\ntake_along_axis : Apply ``np.expand_dims(index_array, axis)``\n                  from argmax to an array as if by calling max.\n\nNotes\n-----\nIn case of multiple occurrences of the maximum values, the indices\ncorresponding to the first occurrence are returned.\n\nExamples\n--------\n>>> a = np.arange(6).reshape(2,3) + 10\n>>> a\narray([[10, 11, 12],\n       [13, 14, 15]])\n>>> np.argmax(a)\n5\n>>> np.argmax(a, axis=0)\narray([1, 1, 1])\n>>> np.argmax(a, axis=1)\narray([2, 2])\n\nIndexes of the maximal elements of a N-dimensional array:\n\n>>> ind = np.unravel_index(np.argmax(a, axis=None), a.shape)\n>>> ind\n(1, 2)\n>>> a[ind]\n15\n\n>>> b = np.arange(6)\n>>> b[1] = 5\n>>> b\narray([0, 5, 2, 3, 4, 5])\n>>> np.argmax(b)  # Only the first occurrence is returned.\n1\n\n>>> x = np.array([[4,2,3], [1,0,3]])\n>>> index_array = np.argmax(x, axis=-1)\n>>> # Same as np.amax(x, axis=-1, keepdims=True)\n>>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1)\narray([[4],\n       [3]])\n>>> # Same as np.amax(x, axis=-1)\n>>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1).squeeze(axis=-1)\narray([4, 3])\n\nSetting `keepdims` to `True`,\n\n>>> x = np.arange(24).reshape((2, 3, 4))\n>>> res = np.argmax(x, axis=1, keepdims=True)\n>>> res.shape\n(2, 1, 4)",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": "@array_function_dispatch(_argmax_dispatcher)\ndef argmax(a, axis=None, out=None, *, keepdims=np._NoValue):\n    \"\"\"\n    Returns the indices of the maximum values along an axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int, optional\n        By default, the index is into the flattened array, otherwise\n        along the specified axis.\n    out : array, optional\n        If provided, the result will be inserted into this array. It should\n        be of the appropriate shape and dtype.\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the array.\n\n        .. versionadded:: 1.22.0\n\n    Returns\n    -------\n    index_array : ndarray of ints\n        Array of indices into the array. It has the same shape as `a.shape`\n        with the dimension along `axis` removed. If `keepdims` is set to True,\n        then the size of `axis` will be 1 with the resulting array having same\n        shape as `a.shape`.\n\n    See Also\n    --------\n    ndarray.argmax, argmin\n    amax : The maximum value along a given axis.\n    unravel_index : Convert a flat index into an index tuple.\n    take_along_axis : Apply ``np.expand_dims(index_array, axis)``\n                      from argmax to an array as if by calling max.\n\n    Notes\n    -----\n    In case of multiple occurrences of the maximum values, the indices\n    corresponding to the first occurrence are returned.\n\n    Examples\n    --------\n    >>> a = np.arange(6).reshape(2,3) + 10\n    >>> a\n    array([[10, 11, 12],\n           [13, 14, 15]])\n    >>> np.argmax(a)\n    5\n    >>> np.argmax(a, axis=0)\n    array([1, 1, 1])\n    >>> np.argmax(a, axis=1)\n    array([2, 2])\n\n    Indexes of the maximal elements of a N-dimensional array:\n\n    >>> ind = np.unravel_index(np.argmax(a, axis=None), a.shape)\n    >>> ind\n    (1, 2)\n    >>> a[ind]\n    15\n\n    >>> b = np.arange(6)\n    >>> b[1] = 5\n    >>> b\n    array([0, 5, 2, 3, 4, 5])\n    >>> np.argmax(b)  # Only the first occurrence is returned.\n    1\n\n    >>> x = np.array([[4,2,3], [1,0,3]])\n    >>> index_array = np.argmax(x, axis=-1)\n    >>> # Same as np.amax(x, axis=-1, keepdims=True)\n    >>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1)\n    array([[4],\n           [3]])\n    >>> # Same as np.amax(x, axis=-1)\n    >>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1).squeeze(axis=-1)\n    array([4, 3])\n\n    Setting `keepdims` to `True`,\n\n    >>> x = np.arange(24).reshape((2, 3, 4))\n    >>> res = np.argmax(x, axis=1, keepdims=True)\n    >>> res.shape\n    (2, 1, 4)\n    \"\"\"\n    kwds = {'keepdims': keepdims} if keepdims is not np._NoValue else {}\n    return _wrapfunc(a, 'argmax', axis=axis, out=out, **kwds)\n",
    "summarized_doc": "The given function returns the indices of the maximum values along the specified axis of an input array. \n\nParameters:\n- `a` (array_like): This is the input array.\n- `axis` (int, optional): If not specified, the index returned is into the flattened array. But if specified, the indexing works along the chosen axis.\n- `out` (array, optional): If provided, the result will be inserted into this array. The array must have the suitable shape and datatype.\n- `keepdims` (bool, optional): If set as True, the axes which are reduced are kept in the result as dimensions with size one. Hence, the resultant array will correctly broadcast against the input array.\n\nReturns:\n- `index_array` (ndarray of ints): This array contains indices into the input array. It has the same shape as `a.shape` with the dimension along `axis` removed, unless `keepdims` is set as True.\n\nIn case of multiple occurrences of maximum values, indices related to the first occurrence are returned.\n\nExample:\n```python\nimport numpy as np\na = np.arange(6).reshape(2,3) + 10\nprint(np.argmax(a))\n```\nOutput:\n```\n5\n```\n\nIn an array [[10, 11, 12], [13, 14, 15]], the maximum value is 15 and its index is 5. Hence the output.\n\nNote: The `keepdims` parameter was introduced starting from the version 1.22.0. Keepdim keeps the dimension of the input, making it handy in situations where broadcasting operation needs to be done on the input array.\n\nRelated Functions: `ndarray.argmax`, `argmin`, `amax`, `unravel_index` and `take_along_axis`."
}