{
    "api_path": "numpy.argsort",
    "arguments_str": "a,axis=-1,kind=None,order=None",
    "doc_string": "Returns the indices that would sort an array.\n\nPerform an indirect sort along the given axis using the algorithm specified\nby the `kind` keyword. It returns an array of indices of the same shape as\n`a` that index data along the given axis in sorted order.\n\nParameters\n----------\na : array_like\n    Array to sort.\naxis : int or None, optional\n    Axis along which to sort.  The default is -1 (the last axis). If None,\n    the flattened array is used.\nkind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional\n    Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\n    and 'mergesort' use timsort under the covers and, in general, the\n    actual implementation will vary with data type. The 'mergesort' option\n    is retained for backwards compatibility.\n\n    .. versionchanged:: 1.15.0.\n       The 'stable' option was added.\norder : str or list of str, optional\n    When `a` is an array with fields defined, this argument specifies\n    which fields to compare first, second, etc.  A single field can\n    be specified as a string, and not all fields need be specified,\n    but unspecified fields will still be used, in the order in which\n    they come up in the dtype, to break ties.\n\nReturns\n-------\nindex_array : ndarray, int\n    Array of indices that sort `a` along the specified `axis`.\n    If `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\n    More generally, ``np.take_along_axis(a, index_array, axis=axis)``\n    always yields the sorted `a`, irrespective of dimensionality.\n\nSee Also\n--------\nsort : Describes sorting algorithms used.\nlexsort : Indirect stable sort with multiple keys.\nndarray.sort : Inplace sort.\nargpartition : Indirect partial sort.\ntake_along_axis : Apply ``index_array`` from argsort\n                  to an array as if by calling sort.\n\nNotes\n-----\nSee `sort` for notes on the different sorting algorithms.\n\nAs of NumPy 1.4.0 `argsort` works with real/complex arrays containing\nnan values. The enhanced sort order is documented in `sort`.\n\nExamples\n--------\nOne dimensional array:\n\n>>> x = np.array([3, 1, 2])\n>>> np.argsort(x)\narray([1, 2, 0])\n\nTwo-dimensional array:\n\n>>> x = np.array([[0, 3], [2, 2]])\n>>> x\narray([[0, 3],\n       [2, 2]])\n\n>>> ind = np.argsort(x, axis=0)  # sorts along first axis (down)\n>>> ind\narray([[0, 1],\n       [1, 0]])\n>>> np.take_along_axis(x, ind, axis=0)  # same as np.sort(x, axis=0)\narray([[0, 2],\n       [2, 3]])\n\n>>> ind = np.argsort(x, axis=1)  # sorts along last axis (across)\n>>> ind\narray([[0, 1],\n       [0, 1]])\n>>> np.take_along_axis(x, ind, axis=1)  # same as np.sort(x, axis=1)\narray([[0, 3],\n       [2, 2]])\n\nIndices of the sorted elements of a N-dimensional array:\n\n>>> ind = np.unravel_index(np.argsort(x, axis=None), x.shape)\n>>> ind\n(array([0, 1, 1, 0]), array([0, 0, 1, 1]))\n>>> x[ind]  # same as np.sort(x, axis=None)\narray([0, 2, 2, 3])\n\nSorting with keys:\n\n>>> x = np.array([(1, 0), (0, 1)], dtype=[('x', '<i4'), ('y', '<i4')])\n>>> x\narray([(1, 0), (0, 1)],\n      dtype=[('x', '<i4'), ('y', '<i4')])\n\n>>> np.argsort(x, order=('x','y'))\narray([1, 0])\n\n>>> np.argsort(x, order=('y','x'))\narray([0, 1])",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": "@array_function_dispatch(_argsort_dispatcher)\ndef argsort(a, axis=-1, kind=None, order=None):\n    \"\"\"\n    Returns the indices that would sort an array.\n\n    Perform an indirect sort along the given axis using the algorithm specified\n    by the `kind` keyword. It returns an array of indices of the same shape as\n    `a` that index data along the given axis in sorted order.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to sort.\n    axis : int or None, optional\n        Axis along which to sort.  The default is -1 (the last axis). If None,\n        the flattened array is used.\n    kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional\n        Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\n        and 'mergesort' use timsort under the covers and, in general, the\n        actual implementation will vary with data type. The 'mergesort' option\n        is retained for backwards compatibility.\n\n        .. versionchanged:: 1.15.0.\n           The 'stable' option was added.\n    order : str or list of str, optional\n        When `a` is an array with fields defined, this argument specifies\n        which fields to compare first, second, etc.  A single field can\n        be specified as a string, and not all fields need be specified,\n        but unspecified fields will still be used, in the order in which\n        they come up in the dtype, to break ties.\n\n    Returns\n    -------\n    index_array : ndarray, int\n        Array of indices that sort `a` along the specified `axis`.\n        If `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\n        More generally, ``np.take_along_axis(a, index_array, axis=axis)``\n        always yields the sorted `a`, irrespective of dimensionality.\n\n    See Also\n    --------\n    sort : Describes sorting algorithms used.\n    lexsort : Indirect stable sort with multiple keys.\n    ndarray.sort : Inplace sort.\n    argpartition : Indirect partial sort.\n    take_along_axis : Apply ``index_array`` from argsort\n                      to an array as if by calling sort.\n\n    Notes\n    -----\n    See `sort` for notes on the different sorting algorithms.\n\n    As of NumPy 1.4.0 `argsort` works with real/complex arrays containing\n    nan values. The enhanced sort order is documented in `sort`.\n\n    Examples\n    --------\n    One dimensional array:\n\n    >>> x = np.array([3, 1, 2])\n    >>> np.argsort(x)\n    array([1, 2, 0])\n\n    Two-dimensional array:\n\n    >>> x = np.array([[0, 3], [2, 2]])\n    >>> x\n    array([[0, 3],\n           [2, 2]])\n\n    >>> ind = np.argsort(x, axis=0)  # sorts along first axis (down)\n    >>> ind\n    array([[0, 1],\n           [1, 0]])\n    >>> np.take_along_axis(x, ind, axis=0)  # same as np.sort(x, axis=0)\n    array([[0, 2],\n           [2, 3]])\n\n    >>> ind = np.argsort(x, axis=1)  # sorts along last axis (across)\n    >>> ind\n    array([[0, 1],\n           [0, 1]])\n    >>> np.take_along_axis(x, ind, axis=1)  # same as np.sort(x, axis=1)\n    array([[0, 3],\n           [2, 2]])\n\n    Indices of the sorted elements of a N-dimensional array:\n\n    >>> ind = np.unravel_index(np.argsort(x, axis=None), x.shape)\n    >>> ind\n    (array([0, 1, 1, 0]), array([0, 0, 1, 1]))\n    >>> x[ind]  # same as np.sort(x, axis=None)\n    array([0, 2, 2, 3])\n\n    Sorting with keys:\n\n    >>> x = np.array([(1, 0), (0, 1)], dtype=[('x', '<i4'), ('y', '<i4')])\n    >>> x\n    array([(1, 0), (0, 1)],\n          dtype=[('x', '<i4'), ('y', '<i4')])\n\n    >>> np.argsort(x, order=('x','y'))\n    array([1, 0])\n\n    >>> np.argsort(x, order=('y','x'))\n    array([0, 1])\n\n    \"\"\"\n    return _wrapfunc(a, 'argsort', axis=axis, kind=kind, order=order)\n",
    "summarized_doc": "The function `argsort` in Python's Numpy library returns the indices that would sort an array. It performs an indirect sort along a specified axis using a sorting algorithm dictated by a 'kind' parameter.\n\n**Parameters:**\n\n1. `a` (array-like) - This is the array to sort.\n2. `axis` (int/None, optional) - It's the axis along which to sort. Default is -1, which means the last axis. If None, the function sorts the flattened array.\n3. `kind` ({'quicksort', 'mergesort', 'heapsort', 'stable'}, optional) - This parameter specifies the sorting algorithm. The default is 'quicksort'. Both 'stable' and 'mergesort' use timsort and the actual implementation varies with data type. 'Mergesort' is retained for backwards compatibility.\n4. `order` (str or list of str, optional) - When `a` is an array with defined fields, this argument specifies which fields to compare first, second, etc. A single field can be specified as a string. Unspecified fields will still be used in the order in which they appear in the dtype, to break ties.\n\n**Return:**\n\nIt returns `index_array` (ndarray, int) - an array of indices that sort `a` along the specified `axis`. If `a` is one-dimensional, `a[index_array]` yields a sorted `a`. More generally, `np.take_along_axis(a, index_array, axis=axis)` always yields the sorted `a`, irrespective of dimensionality.\n\nRefer to `sort`, `lexsort`, `ndarray.sort`, `argpartition`, `take_along_axis` for more details on sorting algorithms and their applications.\n\nHere's an example of its application:\n\n```python\nimport numpy as np\n\nx = np.array([3, 1, 2])\nprint(np.argsort(x)) # It prints: array([1, 2, 0])\n```\nThis operation sorts the array [3,1,2] and yields the indices of the array that would make it sorted. In the sorted array [1,2,3], 1 was at index 1 in the original array, 2 was at index 2, and 3 was at index 0. Hence, the output is [1,2,0].\n"
}