{
    "api_path": "numpy.split",
    "arguments_str": "ary,indices_or_sections,axis=0",
    "doc_string": "Split an array into multiple sub-arrays as views into `ary`.\n\nParameters\n----------\nary : ndarray\n    Array to be divided into sub-arrays.\nindices_or_sections : int or 1-D array\n    If `indices_or_sections` is an integer, N, the array will be divided\n    into N equal arrays along `axis`.  If such a split is not possible,\n    an error is raised.\n\n    If `indices_or_sections` is a 1-D array of sorted integers, the entries\n    indicate where along `axis` the array is split.  For example,\n    ``[2, 3]`` would, for ``axis=0``, result in\n\n      - ary[:2]\n      - ary[2:3]\n      - ary[3:]\n\n    If an index exceeds the dimension of the array along `axis`,\n    an empty sub-array is returned correspondingly.\naxis : int, optional\n    The axis along which to split, default is 0.\n\nReturns\n-------\nsub-arrays : list of ndarrays\n    A list of sub-arrays as views into `ary`.\n\nRaises\n------\nValueError\n    If `indices_or_sections` is given as an integer, but\n    a split does not result in equal division.\n\nSee Also\n--------\narray_split : Split an array into multiple sub-arrays of equal or\n              near-equal size.  Does not raise an exception if\n              an equal division cannot be made.\nhsplit : Split array into multiple sub-arrays horizontally (column-wise).\nvsplit : Split array into multiple sub-arrays vertically (row wise).\ndsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\nconcatenate : Join a sequence of arrays along an existing axis.\nstack : Join a sequence of arrays along a new axis.\nhstack : Stack arrays in sequence horizontally (column wise).\nvstack : Stack arrays in sequence vertically (row wise).\ndstack : Stack arrays in sequence depth wise (along third dimension).\n\nExamples\n--------\n>>> x = np.arange(9.0)\n>>> np.split(x, 3)\n[array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]\n\n>>> x = np.arange(8.0)\n>>> np.split(x, [3, 5, 6, 10])\n[array([0.,  1.,  2.]),\n array([3.,  4.]),\n array([5.]),\n array([6.,  7.]),\n array([], dtype=float64)]",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": "@array_function_dispatch(_split_dispatcher)\ndef split(ary, indices_or_sections, axis=0):\n    \"\"\"\n    Split an array into multiple sub-arrays as views into `ary`.\n\n    Parameters\n    ----------\n    ary : ndarray\n        Array to be divided into sub-arrays.\n    indices_or_sections : int or 1-D array\n        If `indices_or_sections` is an integer, N, the array will be divided\n        into N equal arrays along `axis`.  If such a split is not possible,\n        an error is raised.\n\n        If `indices_or_sections` is a 1-D array of sorted integers, the entries\n        indicate where along `axis` the array is split.  For example,\n        ``[2, 3]`` would, for ``axis=0``, result in\n\n          - ary[:2]\n          - ary[2:3]\n          - ary[3:]\n\n        If an index exceeds the dimension of the array along `axis`,\n        an empty sub-array is returned correspondingly.\n    axis : int, optional\n        The axis along which to split, default is 0.\n\n    Returns\n    -------\n    sub-arrays : list of ndarrays\n        A list of sub-arrays as views into `ary`.\n\n    Raises\n    ------\n    ValueError\n        If `indices_or_sections` is given as an integer, but\n        a split does not result in equal division.\n\n    See Also\n    --------\n    array_split : Split an array into multiple sub-arrays of equal or\n                  near-equal size.  Does not raise an exception if\n                  an equal division cannot be made.\n    hsplit : Split array into multiple sub-arrays horizontally (column-wise).\n    vsplit : Split array into multiple sub-arrays vertically (row wise).\n    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\n    concatenate : Join a sequence of arrays along an existing axis.\n    stack : Join a sequence of arrays along a new axis.\n    hstack : Stack arrays in sequence horizontally (column wise).\n    vstack : Stack arrays in sequence vertically (row wise).\n    dstack : Stack arrays in sequence depth wise (along third dimension).\n\n    Examples\n    --------\n    >>> x = np.arange(9.0)\n    >>> np.split(x, 3)\n    [array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]\n\n    >>> x = np.arange(8.0)\n    >>> np.split(x, [3, 5, 6, 10])\n    [array([0.,  1.,  2.]),\n     array([3.,  4.]),\n     array([5.]),\n     array([6.,  7.]),\n     array([], dtype=float64)]\n\n    \"\"\"\n    try:\n        len(indices_or_sections)\n    except TypeError:\n        sections = indices_or_sections\n        N = ary.shape[axis]\n        if N % sections:\n            raise ValueError(\n                'array split does not result in an equal division') from None\n    return array_split(ary, indices_or_sections, axis)\n",
    "summarized_doc": "**Function**: `np.split()`\n\nDivides an array into multiple sub-arrays as views into the original array.\n\n**Parameters**:\n\n- `ary: ndarray` : The array to be divided into sub-arrays.\n\n- `indices_or_sections: int or 1-D array` : If this is an integer, N, the array will be divided into N equal arrays along the given axis. If such a split is not possible, an error is raised. If this is a 1-D array of sorted integers, these entries indicate where along the given axis the array is split.\n\n- `axis: int, optional` : The axis along which to split. Default value is 0.\n\n**Returns**:\n\n- `sub-arrays: list of ndarrays` : The result is a list of sub-arrays based on the original array.\n\n**Raises**:\n\n- `ValueError`: Raised if `indices_or_sections` is given as an integer that doesn't result in equal division.\n\n**Related Functions**:\n\n- `array_split()`    : Split array into sub-arrays of equal or near-equal size.\n- `hsplit() / vsplit() / dsplit()`    : Split array in different orientations.\n- `concatenate()`    : Join a sequence of arrays along an existing axis.\n- `stack() / hstack() / vstack() / dstack()`    : Stack arrays in sequence in different orientations.\n\n**Examples**:\n\n```python\nx = np.arange(9.0)\nnp.split(x, 3)\n# Output: [array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]\n\nx = np.arange(8.0)\nnp.split(x, [3, 5, 6, 10])\n# Output: [array([0.,  1.,  2.]), array([3.,  4.]), array([5.]), array([6.,  7.]), array([], dtype=float64)]\n```"
}