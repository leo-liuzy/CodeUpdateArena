{
    "api_path": "sympy.diff",
    "arguments_str": "f,*symbols,**kwargs",
    "doc_string": "Differentiate f with respect to symbols.\n\nExplanation\n===========\n\nThis is just a wrapper to unify .diff() and the Derivative class; its\ninterface is similar to that of integrate().  You can use the same\nshortcuts for multiple variables as with Derivative.  For example,\ndiff(f(x), x, x, x) and diff(f(x), x, 3) both return the third derivative\nof f(x).\n\nYou can pass evaluate=False to get an unevaluated Derivative class.  Note\nthat if there are 0 symbols (such as diff(f(x), x, 0), then the result will\nbe the function (the zeroth derivative), even if evaluate=False.\n\nExamples\n========\n\n>>> from sympy import sin, cos, Function, diff\n>>> from sympy.abc import x, y\n>>> f = Function('f')\n\n>>> diff(sin(x), x)\ncos(x)\n>>> diff(f(x), x, x, x)\nDerivative(f(x), (x, 3))\n>>> diff(f(x), x, 3)\nDerivative(f(x), (x, 3))\n>>> diff(sin(x)*cos(y), x, 2, y, 2)\nsin(x)*cos(y)\n\n>>> type(diff(sin(x), x))\ncos\n>>> type(diff(sin(x), x, evaluate=False))\n<class 'sympy.core.function.Derivative'>\n>>> type(diff(sin(x), x, 0))\nsin\n>>> type(diff(sin(x), x, 0, evaluate=False))\nsin\n\n>>> diff(sin(x))\ncos(x)\n>>> diff(sin(x*y))\nTraceback (most recent call last):\n...\nValueError: specify differentiation variables to differentiate sin(x*y)\n\nNote that ``diff(sin(x))`` syntax is meant only for convenience\nin interactive sessions and should be avoided in library code.\n\nReferences\n==========\n\n.. [1] https://reference.wolfram.com/legacy/v5_2/Built-inFunctions/AlgebraicComputation/Calculus/D.html\n\nSee Also\n========\n\nDerivative\nidiff: computes the derivative implicitly",
    "imports": [
        "import sympy"
    ],
    "return_type_hint": "",
    "source_code": "def diff(f, *symbols, **kwargs):\n    \"\"\"\n    Differentiate f with respect to symbols.\n\n    Explanation\n    ===========\n\n    This is just a wrapper to unify .diff() and the Derivative class; its\n    interface is similar to that of integrate().  You can use the same\n    shortcuts for multiple variables as with Derivative.  For example,\n    diff(f(x), x, x, x) and diff(f(x), x, 3) both return the third derivative\n    of f(x).\n\n    You can pass evaluate=False to get an unevaluated Derivative class.  Note\n    that if there are 0 symbols (such as diff(f(x), x, 0), then the result will\n    be the function (the zeroth derivative), even if evaluate=False.\n\n    Examples\n    ========\n\n    >>> from sympy import sin, cos, Function, diff\n    >>> from sympy.abc import x, y\n    >>> f = Function('f')\n\n    >>> diff(sin(x), x)\n    cos(x)\n    >>> diff(f(x), x, x, x)\n    Derivative(f(x), (x, 3))\n    >>> diff(f(x), x, 3)\n    Derivative(f(x), (x, 3))\n    >>> diff(sin(x)*cos(y), x, 2, y, 2)\n    sin(x)*cos(y)\n\n    >>> type(diff(sin(x), x))\n    cos\n    >>> type(diff(sin(x), x, evaluate=False))\n    <class 'sympy.core.function.Derivative'>\n    >>> type(diff(sin(x), x, 0))\n    sin\n    >>> type(diff(sin(x), x, 0, evaluate=False))\n    sin\n\n    >>> diff(sin(x))\n    cos(x)\n    >>> diff(sin(x*y))\n    Traceback (most recent call last):\n    ...\n    ValueError: specify differentiation variables to differentiate sin(x*y)\n\n    Note that ``diff(sin(x))`` syntax is meant only for convenience\n    in interactive sessions and should be avoided in library code.\n\n    References\n    ==========\n\n    .. [1] https://reference.wolfram.com/legacy/v5_2/Built-inFunctions/AlgebraicComputation/Calculus/D.html\n\n    See Also\n    ========\n\n    Derivative\n    idiff: computes the derivative implicitly\n\n    \"\"\"\n    if hasattr(f, 'diff'):\n        return f.diff(*symbols, **kwargs)\n    kwargs.setdefault('evaluate', True)\n    return _derivative_dispatch(f, *symbols, **kwargs)\n",
    "summarized_doc": "Function\n========\n`diff(func, *symbols, **kwargs)`\n\nDescription\n===========\nThis function differentiates a function or expression w.r.t symbols provided. It is a wrapper that unifies the `.diff()` method and `Derivative` class. You can use similar shortcuts for multiple variables as in `Derivative` class. For instance, `diff(f(x), x, x, x)` and `diff(f(x), x, 3)` both return the third derivative of f(x).\n\nAn optional keyword argument `evaluate` can be passed to control whether to get an unevaluated `Derivative` class. Specifically, `diff(func, *symbols, evaluate=False)`. If there are no symbols (as in `diff(f(x), x, 0)`), then the result will be the function itself (the zeroth derivative), even if `evaluate=False`.\n\nParameters\n==========\n`func`: function/expression\n  The function or expression to be differentiated.\n`*symbols`: Symbol(s)\n  The symbol(s) w.r.t which the function will be differentiated.\n`**kwargs`: \n  Additional parameters are: \n    - `evaluate = False`; returns an unevaluated Derivative class.\n\nReturns\n=======\nDifferentiated expression or Derivative class if `evaluate=False`.\n\nExamples\n========\n```python\nfrom sympy import sin, Function, diff\nfrom sympy.abc import x, y\n\nf = Function('f')\n# differentiate sin(x) w.r.t x\nprint(diff(sin(x), x))  # Returns: cos(x)\n\n# Get 3rd derivative of f(x) w.r.t x\nprint(diff(f(x), x, x, x))   # Returns: Derivative(f(x), (x, 3))\nprint(diff(f(x), x, 3))  # Returns: Derivative(f(x), (x, 3))\n\n# differentiate sin(x)*cos(y) w.r.t x twice and y twice\nprint(diff(sin(x)*cos(y), x, 2, y, 2))  # Returns: sin(x)*cos(y)\n```\n\nSee Also\n========\n- `Derivative`\n- `idiff`: computes the derivative implicitly.\n\nReference\n=========\n- [https://reference.wolfram.com/legacy/v5_2/Built-inFunctions/AlgebraicComputation/Calculus/D.html](https://reference.wolfram.com/legacy/v5_2/Built-inFunctions/AlgebraicComputation/Calculus/D.html)"
}