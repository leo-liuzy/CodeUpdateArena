{
    "api_path": "pandas.DataFrame.select_dtypes",
    "arguments_str": "self,include=None,exclude=None",
    "doc_string": "Return a subset of the DataFrame's columns based on the column dtypes.\n\nParameters\n----------\ninclude, exclude : scalar or list-like\n    A selection of dtypes or strings to be included/excluded. At least\n    one of these parameters must be supplied.\n\nReturns\n-------\nDataFrame\n    The subset of the frame including the dtypes in ``include`` and\n    excluding the dtypes in ``exclude``.\n\nRaises\n------\nValueError\n    * If both of ``include`` and ``exclude`` are empty\n    * If ``include`` and ``exclude`` have overlapping elements\n    * If any kind of string dtype is passed in.\n\nSee Also\n--------\nDataFrame.dtypes: Return Series with the data type of each column.\n\nNotes\n-----\n* To select all *numeric* types, use ``np.number`` or ``'number'``\n* To select strings you must use the ``object`` dtype, but note that\n  this will return *all* object dtype columns\n* See the `numpy dtype hierarchy\n  <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n* To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n  ``'datetime64'``\n* To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n  ``'timedelta64'``\n* To select Pandas categorical dtypes, use ``'category'``\n* To select Pandas datetimetz dtypes, use ``'datetimetz'``\n  or ``'datetime64[ns, tz]'``\n\nExamples\n--------\n>>> df = pd.DataFrame({'a': [1, 2] * 3,\n...                    'b': [True, False] * 3,\n...                    'c': [1.0, 2.0] * 3})\n>>> df\n        a      b  c\n0       1   True  1.0\n1       2  False  2.0\n2       1   True  1.0\n3       2  False  2.0\n4       1   True  1.0\n5       2  False  2.0\n\n>>> df.select_dtypes(include='bool')\n   b\n0  True\n1  False\n2  True\n3  False\n4  True\n5  False\n\n>>> df.select_dtypes(include=['float64'])\n   c\n0  1.0\n1  2.0\n2  1.0\n3  2.0\n4  1.0\n5  2.0\n\n>>> df.select_dtypes(exclude=['int64'])\n       b    c\n0   True  1.0\n1  False  2.0\n2   True  1.0\n3  False  2.0\n4   True  1.0\n5  False  2.0",
    "imports": [
        "import pandas",
        "import pandas as pd",
        "import numpy",
        "import numpy as np",
        "from enum import Enum",
        "from typing import List, Union, Tuple, Dict",
        "from pandas._typing import Axis, Level, Self"
    ],
    "return_type_hint": "-> Self",
    "source_code": "    def select_dtypes(self, include=None, exclude=None) -> Self:\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Returns\n        -------\n        DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        See Also\n        --------\n        DataFrame.dtypes: Return Series with the data type of each column.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'``\n          or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int64'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = (frozenset(include), frozenset(exclude))\n\n        if not any(selection):\n            raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n        # convert the myriad valid dtypes object to a single representation\n        def check_int_infer_dtype(dtypes):\n            converted_dtypes: list[type] = []\n            for dtype in dtypes:\n                # Numpy maps int to different types (int32, in64) on Windows and Linux\n                # see https://github.com/numpy/numpy/issues/9464\n                if (isinstance(dtype, str) and dtype == \"int\") or (dtype is int):\n                    converted_dtypes.append(np.int32)\n                    converted_dtypes.append(np.int64)\n                elif dtype == \"float\" or dtype is float:\n                    # GH#42452 : np.dtype(\"float\") coerces to np.float64 from Numpy 1.20\n                    converted_dtypes.extend([np.float64, np.float32])\n                else:\n                    converted_dtypes.append(infer_dtype_from_object(dtype))\n            return frozenset(converted_dtypes)\n\n        include = check_int_infer_dtype(include)\n        exclude = check_int_infer_dtype(exclude)\n\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n        def dtype_predicate(dtype: DtypeObj, dtypes_set) -> bool:\n            # GH 46870: BooleanDtype._is_numeric == True but should be excluded\n            dtype = dtype if not isinstance(dtype, ArrowDtype) else dtype.numpy_dtype\n            return issubclass(dtype.type, tuple(dtypes_set)) or (\n                np.number in dtypes_set\n                and getattr(dtype, \"_is_numeric\", False)\n                and not is_bool_dtype(dtype)\n            )\n\n        def predicate(arr: ArrayLike) -> bool:\n            dtype = arr.dtype\n            if include:\n                if not dtype_predicate(dtype, include):\n                    return False\n\n            if exclude:\n                if dtype_predicate(dtype, exclude):\n                    return False\n\n            return True\n\n        mgr = self._mgr._get_data_subset(predicate).copy(deep=None)\n        # error: Incompatible return value type (got \"DataFrame\", expected \"Self\")\n        return self._constructor_from_mgr(mgr, axes=mgr.axes).__finalize__(self)  # type: ignore[return-value]\n",
    "summarized_doc": "Functionality:\nThis function returns a subset of the DataFrame's columns based on the column data types (dtypes).\n\nParameters:\n1. include, exclude: These parameters can accept a scalar or list-like values. The types or strings included in 'include' will be included in the returned DataFrame, while those in 'exclude' will be excluded. At least one of these parameters must be supplied.\n\nOutput:\nThis function returns a DataFrame that includes the dtypes mentioned in 'include' and excludes the dtypes in 'exclude'.\n\nExceptions:\n1. ValueError is raised if both 'include' and 'exclude' parameters are empty.\n2. ValueError is raised if 'include' and 'exclude' parameters have overlapping elements.\n3. ValueError is raised if any kind of string dtype is passed.\n\nUsage:\nSelect all numeric types by using 'np.number' or 'number'.\nTo select strings use the 'object' dtype.\nTo select datetimes, use 'np.datetime64', 'datetime' or 'datetime64'.\nTo select Pandas categorical dtypes, use 'category'.\nTo select Pandas datetimetz dtypes, use 'datetimetz' or 'datetime64[ns, tz]'.\n\nExample:\n```python\nimport pandas as pd\n\ndf = pd.DataFrame({'a': [1, 2] * 3,\n                   'b': [True, False] * 3,\n                   'c': [1.0, 2.0] * 3})\n\n# Select bool dtype\ndf.select_dtypes(include='bool')\n\n# Select float64 dtype\ndf.select_dtypes(include=['float64'])\n\n# Exclude int64 dtype\ndf.select_dtypes(exclude=['int64'])\n```\n\nPlease refer to https://numpy.org/doc/stable/reference/arrays.scalars.html for numpy dtype hierarchy."
}