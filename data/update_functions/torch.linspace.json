{
    "api_path": "torch.linspace",
    "arguments_str": "start,end,steps,*,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False",
    "doc_string": "linspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nCreates a one-dimensional tensor of size :attr:`steps` whose values are evenly\nspaced from :attr:`start` to :attr:`end`, inclusive. That is, the value are:\n\n.. math::\n    (\\text{start},\n    \\text{start} + \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1},\n    \\ldots,\n    \\text{start} + (\\text{steps} - 2) * \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1},\n    \\text{end})\n\n\nFrom PyTorch 1.11 linspace requires the steps argument. Use steps=100 to restore the previous behavior.\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n\nKeyword arguments:\n    out (Tensor, optional): the output tensor.\n    dtype (torch.dtype, optional): the data type to perform the computation in.\n        Default: if None, uses the global default dtype (see torch.get_default_dtype())\n        when both :attr:`start` and :attr:`end` are real,\n        and corresponding complex dtype when either is complex.\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n        Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if ``None``, uses the current device for the default tensor type\n        (see :func:`torch.set_default_device`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n\n\nExample::\n\n    >>> torch.linspace(3, 10, steps=5)\n    tensor([  3.0000,   4.7500,   6.5000,   8.2500,  10.0000])\n    >>> torch.linspace(-10, 10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=1)\n    tensor([-10.])",
    "imports": [
        "import torch"
    ],
    "return_type_hint": "-> Tensor",
    "source_code": null,
    "summarized_doc": "**Function**: torch.linspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\n**Description**: This method generates a one-dimensional Tensor of size defined by 'steps'. The values in this Tensor are evenly spaced from 'start' to 'end', inclusive.\n   \nThe values are calculated as: \n   \n(\\text{start} , \\text{start} + \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1} , \\ldots, \\text{start} + (\\text{steps} - 2) * \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1}, \\text{end})\n\nFrom PyTorch 1.11 onwards, 'steps' argument is required. To restore the previous behavior, use steps=100.\n\n**Input parameters**:\n\n- start (float or Tensor): This is the starting value for the set of points. If used as a Tensor, it should be 0-dimensional.\n- end (float or Tensor): This is the ending value for the set of points. If used as a Tensor, it should be 0-dimensional.\n- steps (int): The size of the constructed tensor.\n\n**Keyword arguments**:\n\n- out (Tensor, optional): The output tensor.\n- dtype (torch.dtype, optional): This specifies the data type to perform the computation. Default is None. If start and end are real, default dtype is real. If either is complex, dtype is complex.\n- layout (torch.layout, optional): The desired layout of returned Tensor. Default is `torch.strided`.\n- device (torch.device, optional): The desired device of returned tensor. Default is current device for the default tensor type.\n- requires_grad (bool, optional): If set to True, autograd will record operations on the returned tensor. Default is False.\n\n**Example**:\n\n    >>> torch.linspace(3, 10, steps=5)\n    tensor([  3.0000,   4.7500,   6.5000,   8.2500,  10.0000])\n    >>> torch.linspace(-10, 10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=1)\n    tensor([-10.])"
}