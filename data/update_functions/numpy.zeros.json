{
    "api_path": "numpy.zeros",
    "arguments_str": "shape,dtype=float,order='C',*,like=None",
    "doc_string": "zeros(shape, dtype=float, order='C', *, like=None)\n\nReturn a new array of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\n\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\n\nExamples\n--------\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n\n>>> np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n\n>>> np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n\n>>> s = (2,2)\n>>> np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n\n>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '<i4'), ('y', '<i4')])",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": null,
    "summarized_doc": "The zeros function in numpy library creates a new array of zeros with a specified shape, type, order and optionally, a reference object for creation of non-numpy arrays. \n\nParameters:\n1. shape (required): An integer or tuple of integers representing the shape of the new array. Example: (2, 3) or 2.\n2. dtype (optional): The desired data type for the array. The default is numpy.float64. Example: numpy.int8.\n3. order (optional): Specifies whether to store the data in row-major (C-style) or column-major (Fortran-style) order in memory. Default: \u2018C\u2019.\n4. like (optional): A reference object that allows the creation of arrays that are not NumPy arrays. This parameter was added in version 1.20.0.\n\nThis function returns an ndarray, which is the array of zeros with the given shape, dtype, and order.\n\nHere are some examples of how to use the function:\n\nExample 1: Create an array of 5 zeros.\n```python\nnp.zeros(5)\n```\n\nExample 2: Create an array of 5 zeros with integer data type.\n```python\nnp.zeros((5,), dtype=int)\n```\n\nExample 3: Create a 2x1 array of zeros.\n```python\nnp.zeros((2, 1))\n```\n\nExample 4: Create a 2x2 array of zeros.\n```python\ns = (2,2)\nnp.zeros(s)\n```\n\nExample 5: Create an array of zeros with a custom data type.\n```python\nnp.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) \n``` \nThis will create an array with elements that each have 'x' and 'y' properties with integer data types."
}