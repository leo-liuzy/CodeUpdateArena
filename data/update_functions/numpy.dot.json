{
    "api_path": "numpy.dot",
    "arguments_str": "a,b,out=None",
    "doc_string": "dot(a, b, out=None)\n\nDot product of two arrays. Specifically,\n\n- If both `a` and `b` are 1-D arrays, it is inner product of vectors\n  (without complex conjugation).\n\n- If both `a` and `b` are 2-D arrays, it is matrix multiplication,\n  but using :func:`matmul` or ``a @ b`` is preferred.\n\n- If either `a` or `b` is 0-D (scalar), it is equivalent to\n  :func:`multiply` and using ``numpy.multiply(a, b)`` or ``a * b`` is\n  preferred.\n\n- If `a` is an N-D array and `b` is a 1-D array, it is a sum product over\n  the last axis of `a` and `b`.\n\n- If `a` is an N-D array and `b` is an M-D array (where ``M>=2``), it is a\n  sum product over the last axis of `a` and the second-to-last axis of\n  `b`::\n\n    dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])\n\nIt uses an optimized BLAS library when possible (see `numpy.linalg`).\n\nParameters\n----------\na : array_like\n    First argument.\nb : array_like\n    Second argument.\nout : ndarray, optional\n    Output argument. This must have the exact kind that would be returned\n    if it was not used. In particular, it must have the right type, must be\n    C-contiguous, and its dtype must be the dtype that would be returned\n    for `dot(a,b)`. This is a performance feature. Therefore, if these\n    conditions are not met, an exception is raised, instead of attempting\n    to be flexible.\n\nReturns\n-------\noutput : ndarray\n    Returns the dot product of `a` and `b`.  If `a` and `b` are both\n    scalars or both 1-D arrays then a scalar is returned; otherwise\n    an array is returned.\n    If `out` is given, then it is returned.\n\nRaises\n------\nValueError\n    If the last dimension of `a` is not the same size as\n    the second-to-last dimension of `b`.\n\nSee Also\n--------\nvdot : Complex-conjugating dot product.\ntensordot : Sum products over arbitrary axes.\neinsum : Einstein summation convention.\nmatmul : '@' operator as method with out parameter.\nlinalg.multi_dot : Chained dot product.\n\nExamples\n--------\n>>> np.dot(3, 4)\n12\n\nNeither argument is complex-conjugated:\n\n>>> np.dot([2j, 3j], [2j, 3j])\n(-13+0j)\n\nFor 2-D arrays it is the matrix product:\n\n>>> a = [[1, 0], [0, 1]]\n>>> b = [[4, 1], [2, 2]]\n>>> np.dot(a, b)\narray([[4, 1],\n       [2, 2]])\n\n>>> a = np.arange(3*4*5*6).reshape((3,4,5,6))\n>>> b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))\n>>> np.dot(a, b)[2,3,2,1,2,2]\n499128\n>>> sum(a[2,3,2,:] * b[1,2,:,2])\n499128",
    "imports": [
        "import numpy"
    ],
    "return_type_hint": "",
    "source_code": null,
    "summarized_doc": "Function Name: `dot(a, b, out=None)`\n\nThe `dot` function performs the dot product of two arrays `a` and `b`. The operation performed by the function changes depending on the dimensions of the input arrays. All the possible operations include the inner product of vectors, matrix multiplication, multiplication like function `multiply` if any of the inputs is scalar, sum product over different axes depending on the dimensions of the input arrays. The function uses optimized BLAS library when possible.\n\n**Parameters:**\n\n1. `a`: [Type: array_like] This is the first input argument.\n2. `b`: [Type: array_like] This is the second input argument.\n3. `out`: [Type: ndarray, optional] This is an output argument. It must have the exact kind that would be returned if it was not used. It must have the right type, must be C-contiguous, and its dtype must be the dtype that would be returned for `dot(a,b)`. This is a performance feature. If these conditions are not met, an exception is raised.\n\n**Returns:**\n\n`output`: [Type: ndarray] The dot product of `a` and `b`. If `a` and `b` are both scalars or both 1-D arrays then a scalar is returned; otherwise an array is returned. If `out` is given, then it is returned.\n\n**Raises:**\n\n`ValueError`: If the last dimension of `a` is not the same size as the second-to-last dimension of `b`.\n\n**Example Usage:**\n\n```python\nimport numpy as np\n\n# scalar dot product\nresult = np.dot(3, 4)\nprint(result)  # prints 12\n\n# matrix product for 2-D arrays\na = [[1, 0], [0, 1]]\nb = [[4, 1], [2, 2]]\nresult = np.dot(a, b)\nprint(result)  # prints array([[4, 1], [2, 2]])\n```"
}