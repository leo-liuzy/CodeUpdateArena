{
    "api_path": "torch.bmm",
    "arguments_str": "input,mat2,*,out=None",
    "doc_string": "bmm(input, mat2, *, out=None) -> Tensor\n\nPerforms a batch matrix-matrix product of matrices stored in :attr:`input`\nand :attr:`mat2`.\n\n:attr:`input` and :attr:`mat2` must be 3-D tensors each containing\nthe same number of matrices.\n\nIf :attr:`input` is a :math:`(b \\times n \\times m)` tensor, :attr:`mat2` is a\n:math:`(b \\times m \\times p)` tensor, :attr:`out` will be a\n:math:`(b \\times n \\times p)` tensor.\n\n.. math::\n    \\text{out}_i = \\text{input}_i \\mathbin{@} \\text{mat2}_i\n\nThis operator supports :ref:`TensorFloat32<tf32_on_ampere>`.\n\nOn certain ROCm devices, when using float16 inputs this module will use :ref:`different precision<fp16_on_mi200>` for backward.\n\n.. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.\n          For broadcasting matrix products, see :func:`torch.matmul`.\n\nArgs:\n    input (Tensor): the first batch of matrices to be multiplied\n    mat2 (Tensor): the second batch of matrices to be multiplied\n\nKeyword Args:\n    out (Tensor, optional): the output tensor.\n\nExample::\n\n    >>> input = torch.randn(10, 3, 4)\n    >>> mat2 = torch.randn(10, 4, 5)\n    >>> res = torch.bmm(input, mat2)\n    >>> res.size()\n    torch.Size([10, 3, 5])",
    "imports": [
        "import torch"
    ],
    "return_type_hint": "-> Tensor",
    "source_code": null,
    "summarized_doc": "The function `bmm(input, mat2, *, out=None) -> Tensor` performs a batch matrix-matrix product of matrices contained in the parameters :attr:`input` and :attr:`mat2`.\n\nBoth :attr:`input` and :attr:`mat2` are required to be 3-D tensors, and they should contain the same number of matrices. If :attr:`input` is a tensor of size (b x n x m) and :attr:`mat2` is a tensor of size (b x m x p), the output, named :attr:`out`, will be a tensor of size (b x n x p).\n\nThe function essentially performs the mathematical operation:\n    out_i = input_i @ mat2_i\n\nPlease note that this function does not support broadcast. Use `torch.matmul` for broadcasting matrix products.\n\nArguments:\n- `input` (Tensor): The first batch of matrices to be multiplied.\n- `mat2` (Tensor): The second batch of matrices to be multiplied.\n\nKeyword Argument:\n- `out` (Tensor, optional): The output tensor.\n\nHere is an illustrative Python code:\n```python\n    >>> input = torch.randn(10, 3, 4)\n    >>> mat2 = torch.randn(10, 4, 5)\n    >>> res = torch.bmm(input, mat2)\n    >>> res.size() \n    # Output: torch.Size([10, 3, 5])\n```\nIn this example, two random 3-D tensors, `input` and `mat2`, are created. The function `torch.bmm(input, mat2)` multiplies the two tensors, and the result is stored in `res`. The size of the resulting tensor is then printed."
}