{
    "api_path": "torch.cat",
    "arguments_str": "tensors,dim=0,*,out=None",
    "doc_string": "cat(tensors, dim=0, *, out=None) -> Tensor\n\nConcatenates the given sequence of :attr:`seq` tensors in the given dimension.\nAll tensors must either have the same shape (except in the concatenating\ndimension) or be empty.\n\n:func:`torch.cat` can be seen as an inverse operation for :func:`torch.split`\nand :func:`torch.chunk`.\n\n:func:`torch.cat` can be best understood via examples.\n\nArgs:\n    tensors (sequence of Tensors): any python sequence of tensors of the same type.\n        Non-empty tensors provided must have the same shape, except in the\n        cat dimension.\n    dim (int, optional): the dimension over which the tensors are concatenated\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\n\nExample::\n\n    >>> x = torch.randn(2, 3)\n    >>> x\n    tensor([[ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497]])\n    >>> torch.cat((x, x, x), 0)\n    tensor([[ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497],\n            [ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497],\n            [ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497]])\n    >>> torch.cat((x, x, x), 1)\n    tensor([[ 0.6580, -1.0969, -0.4614,  0.6580, -1.0969, -0.4614,  0.6580,\n             -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497, -0.1034, -0.5790,  0.1497, -0.1034,\n             -0.5790,  0.1497]])",
    "imports": [
        "import torch"
    ],
    "return_type_hint": "-> Tensor",
    "source_code": null,
    "summarized_doc": "**Function**: `torch.cat(tensors, dim=0, *, out=None) -> Tensor`\n\nThe `torch.cat` function concatenates a given sequence of tensors in the given dimension. All tensors must either have the same shape (except in the concatenating dimension) or be empty. It can be seen as an inverse operation for `torch.split` and `torch.chunk`.\n\n**Parameters**\n\n- `tensors` (sequence of Tensors): This is a python sequence of tensors of the same type. Any non-empty tensors provided must have the same shape, except in the concatenating dimension. \n\n- `dim` (int, optional): This is the dimension over which the tensors are concatenated. The default value is \"0\". \n\n**Keyword Parameters**\n\n- `out` (Tensor, optional): This is the output tensor. If specified, the output tensor is populated with the results. It is useful to avoid unnecessary memory allocation. It is optional.\n\n**Example**\n \nPython code that shows the usage is as follows:\n\n```python\n    x = torch.randn(2, 3)\n    torch.cat((x, x, x), 0)\n    torch.cat((x, x, x), 1)\n```\n\nThe first `torch.cat` call concatenates `x` onto itself in the 0-dimension ('rows'), and the second `torch.cat` call concatenates `x` onto itself in the 1-dimension ('columns')."
}