{
    "api_path": "re.sub",
    "arguments_str": "pattern,repl,string,count=0,flags=0",
    "doc_string": "Return the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in string by the\nreplacement repl.  repl can be either a string or a callable;\nif a string, backslash escapes in it are processed.  If it is\na callable, it's passed the Match object and must return\na replacement string to be used.",
    "imports": [
        "import re"
    ],
    "return_type_hint": "",
    "source_code": "def sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\n",
    "summarized_doc": "Function Description:\nThe function replaces the leftmost non-overlapping occurrences of a prescribed pattern within a given string with a specified replacement. The replacement, `repl`, may be either a string or a callable function.\n\nInput Parameters:\n1. `string`: A string in which the pattern will be searched for and replaced.\n2. `pattern`: The pattern that needs to be replaced from the string.\n3. `repl`: This is the replacement for the `pattern` within the `string`. It can be either a string or a callable function.\n\n   - If `repl` is a string, any backslash escapes in it will be processed, i.e., special sequences starting with `\\` will be interpreted accordingly.\n      \n   - If `repl` is a callable function, it will be passed the match object (the found `pattern`). This function should return a replacement string to be used.\n\nOutput:\nThe function returns a string obtained by replacing the leftmost non-overlapping `pattern` instances with the `repl`.\n\nIllustrative Example:\n\nConsider a case where we want to replace all occurrences of a pattern 'is' with 'was' in a provided string.\n\n```python\nimport re\n\nstring = 'This is an example.'\npattern = 'is'\nrepl = 'was'\nresult = re.sub(pattern, repl, string)\n\nprint(result)\n# Output: 'Thwas was an example.'\n```\n\nPlease note that the replacement occurs in 'This' as well because it contains 'is'."
}