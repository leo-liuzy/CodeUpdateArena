{
  "@context": {
    "@language": "en",
    "@vocab": "https://schema.org/",
    "citeAs": "cr:citeAs",
    "column": "cr:column",
    "conformsTo": "dct:conformsTo",
    "cr": "http://mlcommons.org/croissant/",
    "rai": "http://mlcommons.org/croissant/RAI/",
    "data": {
      "@id": "cr:data",
      "@type": "@json"
    },
    "dataType": {
      "@id": "cr:dataType",
      "@type": "@vocab"
    },
    "dct": "http://purl.org/dc/terms/",
    "examples": {
      "@id": "cr:examples",
      "@type": "@json"
    },
    "extract": "cr:extract",
    "field": "cr:field",
    "fileProperty": "cr:fileProperty",
    "fileObject": "cr:fileObject",
    "fileSet": "cr:fileSet",
    "format": "cr:format",
    "includes": "cr:includes",
    "isLiveDataset": "cr:isLiveDataset",
    "jsonPath": "cr:jsonPath",
    "key": "cr:key",
    "md5": "cr:md5",
    "parentField": "cr:parentField",
    "path": "cr:path",
    "recordSet": "cr:recordSet",
    "references": "cr:references",
    "regex": "cr:regex",
    "repeated": "cr:repeated",
    "replace": "cr:replace",
    "sc": "https://schema.org/",
    "separator": "cr:separator",
    "source": "cr:source",
    "subField": "cr:subField",
    "transform": "cr:transform"
  },
  "@type": "sc:Dataset",
  "name": "CodeUpdateArena",
  "description": "Large language models (LLMs) are increasingly being used to synthesize and reason about source code. However, the static nature of these models' knowledge does not reflect the fact that libraries and API functions they invoke are continuously evolving, with functionality being added or changing. While numerous benchmarks evaluate how LLMs can generate code, no prior work has studied how an LLMs' knowledge about code API functions can be updated. To fill this gap, we present CodeUpdateArena, a benchmark for knowledge editing in the code domain. An instance in our benchmark consists of a synthetic API function update paired with a program synthesis example that uses the updated functionality; our goal is to update an LLM to be able to solve this program synthesis example without providing documentation of the update at inference time. Compared to knowledge editing for facts encoded in text, success here is more challenging: a code LLM must correctly reason about the semantics of the modified function rather than just reproduce its syntax. Our dataset is constructed by first prompting GPT-4 to generate atomic and executable function updates. Then, for each update, we generate program synthesis examples whose code solutions are prone to use the update. Our benchmark covers updates of various types to 52 functions from six diverse Python packages, with a total of 577 program synthesis examples. Our experiments show that prepending documentation of the update to open-source code LLMs (i.e., DeepSeek, CodeLlama) does not allow them to incorporate changes for problem solving, and existing knowledge editing techniques also have substantial room for improvement. We hope our benchmark will inspire new methods for knowledge updating in code LLMs.",
  "conformsTo": "http://mlcommons.org/croissant/1.0",
  "url": "https://anonymous.4open.science/r/CodeUpdateArena-73B3/",
  "distribution": [
    {
      "@type": "cr:FileObject",
      "@id": "github-repository",
      "name": "github-repository",
      "description": "OpenAI repository on GitHub.",
      "contentUrl": "https://anonymous.4open.science/r/CodeUpdateArena-73B3/",
      "encodingFormat": "git+https",
      "sha256": "main"
    },
    {
      "@type": "cr:FileSet",
      "@id": "jsonl-files",
      "name": "jsonl-files",
      "description": "JSONL files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/jsonlines",
      "includes": "data/arena-ungrouped.jsonl"
    }
  ],
  "recordSet": [
    {
      "@type": "cr:RecordSet",
      "@id": "jsonl",
      "name": "jsonl",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "jsonl/description",
          "name": "description",
          "description": "The description of the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "description"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/rationale",
          "name": "rationale",
          "description": "The rationale of introducing the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "rationale"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/docstring",
          "name": "docstring",
          "description": "The docstring detailing the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "docstring"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/signature",
          "name": "signature",
          "description": "The new signature of the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "signature"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/imports",
          "name": "imports",
          "description": "The expected imports to run the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "imports"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/implementation",
          "name": "implementation",
          "description": "The implementation of the updated function.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "implementation"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/update_type",
          "name": "update_type",
          "description": "The update type that the update belongs to.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "update_type"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/function_path",
          "name": "function_path",
          "description": "The full api path of the function (e.g. numpy.argsort).",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "function_path"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/package",
          "name": "package",
          "description": "The Python package the function belongs to.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "package"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/update_id",
          "name": "update_id",
          "description": "The unique update_id for the update.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "update_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/scenario",
          "name": "scenario",
          "description": "The scenario that the program synthesis example (one of the examples per update) is situated in.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "scenario"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/problem",
          "name": "problem",
          "description": "The problem that the program synthesis example (one of the examples per update) is trying to tackle.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "problem"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/solution_signature",
          "name": "solution_signature",
          "description": "The signature of solution requried by problem statement.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "solution_signature"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/unit_tests",
          "name": "unit_tests",
          "description": "The unit tests to verify the correctness of a predicated solution.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "unit_tests"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/prog_syn_imports",
          "name": "prog_syn_imports",
          "description": "The imports to run the reference solution of program synthesis example.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "prog_syn_imports"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/ref_solution",
          "name": "ref_solution",
          "description": "The reference solution of the program synthesis example.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "ref_solution"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/prog_syn_id",
          "name": "prog_syn_id",
          "description": "The unique identifier of the program synthesis example.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "prog_syn_id"
            }
          }
        }
      ]
    }
  ]
}
