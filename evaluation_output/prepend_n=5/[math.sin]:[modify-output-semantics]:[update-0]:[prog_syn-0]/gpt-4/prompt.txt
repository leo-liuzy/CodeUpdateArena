[INST]
Update note:
There's an recent update to a function `math.sin(x,/):` --- Update the math.sin function to accept angle in degrees rather than radians.. The function now has a new function signature --- `math.sin(x, unit='radians')`.
Here's a detailed documentation about the update:
[DOC]
The updated function now accepts an optional second argument 'unit'. It represents the unit of measurement for the angle. It can take two values: 'radians' (default) and 'degrees'. If 'unit' is 'radians', the function behaves exactly as before, returning the sine of `x` measured in radians. If 'unit' is 'degrees', then the function will first convert the input angle from degrees to radians, by multiplying it with Ï€/180, and then return the sine of the angle. Note: the function will raise a ValueError if 'unit' is anything other than 'radians' or 'degrees'.
[/DOC]

Your task is to write a Python solution to a problem in a real-world scenario.
The Python code must be between [PYTHON] and [/PYTHON] tags.

Scenario: Anna is a data scientist who is working on a large dataset. As part of her data cleaning tasks, she needs to filter out irrelevant entries from the top of her dataset. Anna notices a pattern that the first few entries that meet a certain condition are usually irrelevant for her analysis. However, she does not want to remove all entries that meet this condition, as the entries that occur later in the dataset containing the condition can provide significant insights.
Problem: Given a Python list of data entries and the maximum number of entries to be dropped from the top of the dataset that meet a specified condition, write a Python function that takes these as input and returns the filtered dataset. The function should remove only the first few entries from the top of the dataset that meet the condition as specified, and leave the rest intact.
Solution signature: def filter_dataset_entries(data_entries: List[Any], max_drop: int) -> List[Any]:
[TEST]
# Unit Test 0
def test_zero_max_drop():
    # A scenario where max drop is 0.
    # This will test that the function does nothing and returns the original dataset.
    data_entries = [11, 22, 33, 44]
    max_drop = 0
    result = filter_dataset_entries(data_entries, max_drop)
    expected_result = data_entries
    
    assert result == expected_result, f'Expected {expected_result}, but got {result}'
    
[/TEST]
[/INST]
[PYTHON]
from typing import Any, List
import itertools

def filter_dataset_entries(data_entries: List[Any], max_drop: int) -> List[Any]:
    # We need to ensure that max_drop is a positive integer.
    if not isinstance(max_drop, int) or max_drop < 0:
        # If max_drop is not an integer or less than zero, we raise an error.
        raise ValueError("max_drop must be a positive integer")
    
    # The condition for the dropwhile function is unspecified in the problem statement. 
    # Let's assume for our current implementation that we want to filter out all 'None' entries from the top of the list.
    def condition(x): 
        return x is None
    
    # The dropwhile function from itertools will drop elements from data_entries according to the condition
    # The new "count" parameter is used here to limit the number of elements dropped.
    iterator = itertools.dropwhile(condition, data_entries, count=max_drop)
    
    # The dropwhile function returns an iterator. We need to convert that back into a list
    # to get the final result.
    result = list(iterator)
    
    # Return the final result
    return result

[/PYTHON]

[INST] Scenario: You are a STEM tutor and want to showcase sine wave properties to your student using Python. You decide to print sine value of various angles in degrees, ranging from 0 to 360, to help them visually see how a sine wave fluctuates.
Problem: In your showcase, you need to create a function that iterates over a list of angle values (in degrees) ranging from 0 to 360, and calculate the sine value of each angle. Return a list of tuples where each tuple consists of the original degree value and its corresponding sine value.
Solution signature: def calculate_sine_values(degrees_list: List[int]) -> List[Tuple[float, float]]:
[TEST]
# Unit Test 0
def test_calculate_sine_for_zero():
    degrees_list = [0]
    # Call the function with 0 degrees which should return a sine value of 0
    result = calculate_sine_values(degrees_list)
    import math
    
    expected_results = [(0, math.sin(math.radians(0)))]
    
    for i, res in enumerate(result):
        assert res == expected_results[i], f"For {degrees_list[i]}, expected {expected_results[i]} but got {res}"
    
[/TEST]
[/INST]